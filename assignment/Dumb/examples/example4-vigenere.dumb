/**
 * Vigenere cipher script -- encipher/decipher
 * a message knowing the keyword.
 *
 * It is a port of the author's JavaScript app
 * doing the same thing; available here:
 * https://github.com/amrwc/ciphers/tree/master/vigenere
 *
 * NOTE: It only supports lowercase letters.
 * 
 * It takes 3 command-line arguments: action,
 * message, keyword. Example usage:
 * ./run -e verysecretmessagetobeencrypted iamakeyword
 */

const alphabet = ['a','b','c','d','e','f','g','h', 'i','j','k','l','m',
                  'n','o','p','q','r','s','t','u','v','w','x','y','z']
const charCode = {
  a:97,b:98,c:99,d:100,e:101,f:102,g:103,h:104,i:105,j:106,k:107,l:108,m:109,n:110,
  o:111,p:112,q:113,r: 114,s:115,t:116,u:117,v:118,w:119,x:120,y:121,z:122
}
const args = get_args()

/**
 * Generate a table of shifted alphabets
 *
 * @param alphabet unchanged English alphabet
 * @return anonymous object containing a shifted alphabet
 * for each of the 26 letters
 */
const generateTable = (alphabet) => {
  let a = alphabet->copy()
  const table = {
    a: a->copy()
  }

  for (let i = 1; i < 26; i++) {
    const char = a->shift()
    a->append(char)
    table[alphabet[i]] = a->copy()
  }

  return table
}

/**
 * Encipher or decipher the message with the encryption key.
 */
const processMessage = () => {
  const table = generateTable(alphabet)
  const msg = args[1]
  const msgLen = msg->length()
  const key = args[2]
  const keyLen = key->length()
  const action = args[0]
  let result = ''
  let j = 0

  if (action == '-e') {
    for (let i = 0; i < msgLen; i++) {
      if (j >= keyLen) j = 0
      result += table[key[j++]][charCode[msg[i]] - 97]
    }
  } else if (action == '-d') {
    for (let i = 0; i < msgLen; i++) {
      if (j >= keyLen) j = 0
      const plainCharIndex = table[key[j++]]->indexOf(msg[i])
      result += table.a[plainCharIndex]
    }
  }

  return result
}

log(processMessage())
