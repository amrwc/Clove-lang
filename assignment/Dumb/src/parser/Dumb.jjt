/*
 * A simple expression parser and evaluator
 *
 */

options {
  LOOKAHEAD = 1;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = false;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = false;
  IGNORE_CASE = false;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = false;
  MULTI = true;
  VISITOR = true;
  JDK_VERSION = "1.8";
  NODE_DEFAULT_VOID = true;
  NODE_EXTENDS = "interpreter.BaseASTNode";
  NODE_PACKAGE = "parser.ast";
  JJTREE_OUTPUT_DIRECTORY = "ast";
}

PARSER_BEGIN(Dumb)
package parser.ast;
public class Dumb {}
PARSER_END(Dumb)

/*
 *
 * Lexer definitions
 *
 */

SKIP : /* WHITE SPACE */
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

SPECIAL_TOKEN : /* COMMENTS */
{
  <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <FORMAL_COMMENT: "/**" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
| <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}

/**
 * These tokens include many aliases for versatility, including some in Polish.
 * 
 * @author amrwc
 */
TOKEN [IGNORE_CASE] : /* RESERVED WORDS AND LITERALS */
{
  < IF: ("IF"|"JESLI") >
| < ELSE: ("ELSE"|"ALBO") >
| < FOR: ("FOR"|"DLA") >
| < WHILE: ("WHILE"|"GDY") >
| < WRITE: ("WRITE"|"LOG"|"PRINT"|"PRINTLN"|"WYSWIETL"|"POKAZ") >
| < FUNCTION: ("FUNCTION"|"FUNC"|"FN"|"FUNKCJA") >
| < RETURN: ("RETURN"|"ZWROC") >
| < OR: ("||"|"OR"|"BADZ") >
| < AND: ("&&"|"AND"|"ORAZ") >
| < NOT: ("!"|"NOT"|"NEGACJA"|"ZANEGUJ") >
| < TRUE: ("TRUE"|"PRAWDA") >
| < FALSE: ("FALSE"|"FALSZ") >
| < QUIT: ("QUIT"|"ZAKONCZ"|"WYJDZ") >
| < LET: ("LET"|"VAR"|"ZADEKLARUJ"|"NOWE"|"NOWY") >
| < CONST: ("CONST"|"CONSTANT"|"STALA") >
| < GETARGS: ("GET_ARGS"|"WCZYTAJ_ARGUMENTY") >
| < HTTP: "HTTP" >
| < FILE: ("FILE"|"PLIK") >
| < RANDOM: ("RANDOM"|"LOSUJ") >
}

TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < STRING_LITERAL:
     ( 
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
     )
   | (
      "'"
      (   (~["\'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "'"
     )
  >
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>|"#")* >
| < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

TOKEN : /* SEPARATORS */
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
| < PP: "++" >
| < MM: "--" >
| < ARROW1: "=>" > // Used for arrow functions.
| < ARROW2: "->" > // Used for prototype functions.
}

TOKEN : /* OPERATOR SYMBOLS */
{
  < ASSIGN: "=" >
| < PEQ: "+=" >
| < MEQ: "-=" >
| < UEQ: "@=" >
| < EQ: "==" >
| < GT: ">" >
| < LT: "<" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: ("!="|"<>") >
| < HOOK: "?" >
| < COLON: ":" >
| < PLUS: "+" >
| < SUBT: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < REM: "%" >
}





/***********************************************
 *          THE GRAMMAR STARTS HERE            *
 ***********************************************/

ASTCode code() #Code :
{}
{
  statement() ( statement() )* <EOF> {return jjtThis;}
}





/***********************************************
 *                 Statements                  *
 ***********************************************/

void statement() #Statement :
{}
{
  LOOKAHEAD(call()) call()
| LOOKAHEAD(3) definition()
| LOOKAHEAD(assignment()) assignment()
| fndef()
| block()
| ifstatement()
| forloop()
| whileloop()
| write()
| quit()
| LOOKAHEAD(2) proto_invoke()
| postfix_expression()
| prefix_expression()
| declaration()
| http()
| file()
}


void call() #Call :
{}
{
  dereference() arglist()
}


/**
 * Definition using the <LET> or <CONST> keywords.
 * 
 * @author amrwc
 */
void definition() #Definition :
{}
{
  <LET> assignment() {jjtThis.defType = "variable";}
| <CONST> const_init() {jjtThis.defType = "constant";}
}


void assignment() #Assignment :
{Token operator;}
{
  LOOKAHEAD(2)
  (
    identifier() ( <DOT> identifier() | "[" add_expression() "]" )* "=" expression()
  )
  |
  (
    LOOKAHEAD(2)
    (
	  // identifier += expression
      identifier() operator = <PEQ> expression()
  	  {jjtThis.shorthandOperator = operator.image;}
    )
    |
    (
	  // identifier -= expression
      identifier() operator = <MEQ> expression()
  	  {jjtThis.shorthandOperator = operator.image;}
    )
  )
}


void const_init() #ConstInit :
{}
{
  identifier() "=" expression()
}


void fndef() #FnDef :
{}
{
  <FUNCTION> identifier() parmlist() "{" 
    fnbody()
    [ <RETURN> returnexpr() {jjtThis.fnHasReturn = true;} ] 
  "}"
}


void block() #Block :
{}
{
  "{" ( statement() )* "}"
}


void ifstatement() #IfStatement :
{}
{
  <IF> "(" expression() ")" statement() 
  [ LOOKAHEAD(1) <ELSE> statement() {jjtThis.ifHasElse = true;} ]
}


void forloop() #ForLoop :
{}
{
  <FOR> "(" definition() ";" expression() ";" ( LOOKAHEAD(3) assignment() | expression() ) ")" statement()
}


void whileloop() #WhileLoop :
{}
{
  <WHILE> "(" expression() ")" statement()
}


/**
 * Write all the arguments to the command line.
 * If there is no arguments, it will print a new line.
 * 
 * @author amrwc
 */
void write() #Write :
{}
{
  <WRITE> "(" [ expression() ( "," expression() )* ] ")"
}


void quit() #Quit :
{}
{
  <QUIT>
}


/**
 * Invoke a prototype function.
 * It can be a statement() or a primary_expression().
 * 
 * @author amrwc
 */
void proto_invoke() #ProtoInvoke :
{Token t;}
{
  dereference() <ARROW2> t = <IDENTIFIER> "("
    [ expression() ( "," expression() )* ]
  ")"
  {jjtThis.tokenValue = t.image;}
}


/**
 * Anonymous function.
 * 
 * @author amrwc
 */
void fnval() #FnVal :
{}
{
  (
    <FUNCTION> parmlist() "{"
      fnbody()
      [ <RETURN> returnexpr() {jjtThis.fnHasReturn = true;} ]
  	"}"
  )
  |
  ( // Arrow function:
    parmlist() <ARROW1> "{"
      fnbody()
      [ <RETURN> returnexpr() {jjtThis.fnHasReturn = true;} ]
  	"}"
  )
}


void arglist() #ArgList :
{}
{
  "(" [ expression() ] ( "," expression() )* ")"
}


void parmlist() #Parmlist :
{}
{
  "(" [ identifier() ( "," identifier() )* ] ")"
}


void fnbody() #FnBody :
{}
{
  ( statement() )* 
}


void returnexpr() #ReturnExpression :
{}
{
  expression()
}


/**
 * Anonymous object declaration.
 * 
 * @author amrwc
 */
void valueObject() #ValueObject :
{}
{
  "{" [ identifier() ":" expression() ( "," identifier() ":" expression() )* ] "}"
}


/**
 * List declaration.
 * 
 * @author amrwc
 */
void valueList() #ValueList :
{}
{
  "[" [ expression() ( "," expression() )* ] "]"
}


/**
 * Declaration of a variable using the <LET> keyword.
 * 
 * @author amrwc
 */
void declaration() #Declaration :
{}
{
  <LET>   identifier() {jjtThis.defType = "variable";}
| <CONST> identifier() {jjtThis.defType = "constant";}
}


/**
 * Sends an HTTP request. Available methods:
 * GET, POST, PUT, DELETE
 * 
 * @author amrwc
 */
void http() #Http :
{}
{
  <HTTP> "("
          ( character() | dereference() )    // Method ("GET"|"POST"|"PUT"|"DELETE")
      "," ( character() | dereference() )    // Url
    ( "," ( character() | dereference() ) )* // Request body
  ")"
}


/**
 * Creates a new file and writes to it.
 * 
 * Usage:
 * file("open", "file.txt", "content")
 * 
 * @author amrwc
 */
void file() #File :
{}
{
  <FILE> "("
          character()                   // Option ("create"/"overwrite"|"open"/"append")
    "," ( character() | dereference() ) // File path
    "," ( character() | dereference() ) // Content
  ")"
}






/***********************************************
 *                Expressions                  *
 ***********************************************/

void expression() :
{}
{
  or_expression()
}

void or_expression() :
{}
{
  and_expression() ( <OR> and_expression() #Or(2) )*
}

void and_expression() :
{}
{
  compare_expression() ( <AND> compare_expression() #And(2) )*
}

void compare_expression() :
{}
{
  add_expression() [
      <EQ> add_expression() #CompEqual(2)
    | <NE> add_expression() #CompNequal(2)
    | <GE> add_expression() #CompGTE(2)
    | <LE> add_expression() #CompLTE(2)
    | <GT> add_expression() #CompGT(2)
    | <LT> add_expression() #CompLT(2)
  ]
}

void add_expression() :
{}
{
  mul_expression() (
      "+"  mul_expression() #Add(2)
    | "-"  mul_expression() #Subtract(2)
  )*
}

void mul_expression() :
{}
{
  unary_expression() (
      "*" unary_expression() #Times(2)
    | "/" unary_expression() #Divide(2)
    | "%" unary_expression() #Modulo(2)
  )*
}

void unary_expression() :
{}
{
    <NOT> unary_expression() #UnaryNot(1)
  | "+"   unary_expression() #UnaryPlus(1)
  | "-"   unary_expression() #UnaryMinus(1)
  | primary_expression()
}

void primary_expression() :
{}
{
    prefix_expression()
  | LOOKAHEAD(2) postfix_expression()
  | LOOKAHEAD(literal()) literal()
  | LOOKAHEAD(fn_invoke()) fn_invoke()
  | LOOKAHEAD(proto_invoke()) proto_invoke()
  | LOOKAHEAD(dereference()) dereference()
  | "(" expression() ")"
  | get_args()
  | http()
  | file()
  | random()
}


void prefix_expression() #IncrementDecrement(1) :
{Token operator;}
{
  LOOKAHEAD(2)
  (
	// ++identifier
  	operator = <PP> identifier()
  	{jjtThis.shorthandOperator = "pre" + operator.image;}
  )
  |
  (
	// --identifier
    operator = <MM> identifier()
  	{jjtThis.shorthandOperator = "pre" + operator.image;}
  )
}


void postfix_expression() #IncrementDecrement(1) :
{Token operator;}
{
  LOOKAHEAD(2)
  (
	// identifier++
  	identifier() operator = <PP>
  	{jjtThis.shorthandOperator = "post" + operator.image;}
  )
  |
  (
	// identifier--
    identifier() operator = <MM>
  	{jjtThis.shorthandOperator = "post" + operator.image;}
  )
}


void literal() :
{}
{
    integer()
  | character()
  | rational()
  | bool()
  | fnval()
  | valueObject()
  | valueList()
}


void fn_invoke() #FnInvoke :
{}
{
  dereference() arglist()
}


void dereference() #Dereference :
{Token t;}
{
  t = <IDENTIFIER> (
    <DOT> identifier()
  | "[" ( LOOKAHEAD(2) add_expression() | dereference() ) "]"
  )*
  {jjtThis.tokenValue = t.image;}
}


/**
 * Get ValueList of command-line arguments.
 *
 * @author amrwc
 */
void get_args() #GetArgs :
{}
{
  <GETARGS> "(" ")"
}


/**
 * Get a random value between min inclusive and max exclusive.
 *
 * Example usage:
 * const rand = random(1, 50)
 *
 * @author amrwc
 */
void random() #Random :
{}
{
  <RANDOM> "("
        add_expression() // Min value
    "," add_expression() // Max value
  ")"
}


void identifier() #Identifier :
{Token t;}
{
  t = <IDENTIFIER> {jjtThis.tokenValue = t.image;}
}


void character() #Character :
{Token t;}
{
  t = <STRING_LITERAL> {jjtThis.tokenValue = t.image;}
}


void integer() #Integer : 
{Token t;} 
{ 
  t = <INTEGER_LITERAL> {jjtThis.tokenValue = t.image;}
}


void rational() #Rational : 
{Token t;} 
{ 
  t = <FLOATING_POINT_LITERAL> {jjtThis.tokenValue = t.image;}
}


void bool() : 
{} 
{ 
    <TRUE> #True
  | <FALSE> #False
}
