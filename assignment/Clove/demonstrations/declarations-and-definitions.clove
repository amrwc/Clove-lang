/**
 * Demonstrates declarations and definitions.
 */

let foo                                 // Variable declaration
let num = 77                            // Variable definition
var str = "bar"                         // 'let' and 'var' are equivalent
const pi = 3.14                         // Constant definition
let flag = false                        // Boolean definition

function sumAndDouble(param1, param2) { // Function definition
  return (param1 + param2) * 2
}
const sq1 = fn(val) {return val * val}  // Value-function definition
const sq2 = (val) => {return val * val} // Arrow function

let emptyList = []                      // List declaration
let list = ["foo", "bar", "baz", 2000]  // List definition
let emptyObject = {}                    // Anonymous object declaration
let object = {                          // Anonymous object definition
  key: "value"
}
let emptyArray[]                        // Array declaration -- 0 capacity
let emptyArrayWithCap[10]               // Array declaration -- explicit capacity
let array[] = {str, list, object, flag} // Array definition -- implicit capacity
let arr2[15] = {"str", ["list"], false} // Array definition -- explicit capacity


log("foo: ", foo)
log("num: ", num)
log("str: ", str)
log("pi: ", pi)
log("flag: ", flag)

log()

log("sumAndDouble(2, 5): ", sumAndDouble(2, 5))
log("sq1(5): ", sq1(5))
log("sq2(7): ", sq2(7))

log()

log("emptyList: ", emptyList)
log("list: ", list)
log("emptyObject: ", emptyObject)
log("object: ", object)

log()

log("list[0] + list[1] + list[3]: ", list[0] + list[1] + list[3])
log("object.key: ", object.key)

log()

log("emptyArray: ", emptyArray)
log("emptyArrayWithCap: ", emptyArrayWithCap, ", emptyArrayWithCap->cap(): ", emptyArrayWithCap->cap())
log("array: ", array)
log("arr2: ", arr2)

log()

log('array[1][1] + " " + array[1][2]: ', array[1][1] + " " + array[1][2])
log("array[2].key + arr2[0]: ", array[2].key + arr2[0])
