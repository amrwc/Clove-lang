// Test shorthand operators

let lorem = "lorem ipsum"
log("lorem: ", lorem)
lorem += " doloret"
log('lorem += " doloret": ', lorem) // lorem ipsum doloret
log()


let seven = 7
log("seven: ", seven)
seven -= 2
log("seven -= 2: ", seven) // 5
log()


let eight = 8
log("eight: ", eight)
log("eight++")
eight++
log("eight: ", eight) // 9
log()


// This could come useful for iterating through objects,
// e.g. str = "key"; obj[key + 1]; obj[key + 2]
let str = "string"
log("str: ", str)
str++
log("str++: ", str) // string1
log()


let six = 6
log("six: ", six)
log("six--")
six--
log("six: ", six) // 5
log()


let t1 = 10
let t2 = 90
log("t1: ", t1, ", t2: ", t2)
t1 += t2++
log("t1 += t2++")
log("t1: ", t1, ", t2: ", t2)
log()


let b1 = 10
let b2 = 0
log("b1: ", b1, ", b2: ", b2)
b2 = b1++ + b1++
log("b2 = b1++ + b1++")
log("b2: ", b2)
log("b1: ", b1)
log()


let mult = 10
log("mult: ", mult)
mult *= mult
log("mult *= mult: ", mult)

let div = 10
log("div: ", div)
div /= div
log("div /= div: ", div)



log()
log()
log()



const list = [10, 20, [30, 40]]
log("list: ", list)
log()

log("	list[0]++: ", list[0]++)
log("	list: ", list)
log()



log()
log()



const obj = {
  ten: 10,
  twenty: 20,
  nested: {
    thirty: 30,
    forty: 40
  }
}
log("obj: ", obj)
log()

log("square-notation:")
log('	obj["twenty"]++: ', obj["twenty"]++)
log("	obj: ", obj)
log()

log('	--obj["twenty"]: ', --obj["twenty"])
log("	obj: ", obj)
log()

log("dot-notation:")
log('	obj.twenty++: ', obj.twenty++)
log("	obj: ", obj)
log()

log('	--obj.twenty: ', --obj.twenty)
log("	obj: ", obj)

log()
log()

log("nested square-notation:")
log('	obj["nested"]["forty"]++: ', obj["nested"]["forty"]++)
log("	obj: ", obj)
log()








